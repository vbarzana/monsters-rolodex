{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","width","src","monster","image","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","search","lastSearch","staticPersons","person","charAt","toUpperCase","substr","length","process","fetch","then","response","json","users","concat","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAIaA,G,kBAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,MAAM,KACNC,IACEJ,EAAMK,QAAQC,OAAd,+BACwBN,EAAMK,QAAQE,GADtC,4BAIJ,4BAAKP,EAAMK,QAAQG,MACnB,2BAAIR,EAAMK,QAAQI,UCXTC,EAAW,SAACV,GAAD,OACtB,yBAAKC,UAAU,aACZD,EAAMW,SAASC,KAAI,SAACP,GACnB,OAAO,kBAAC,EAAD,CAAMQ,IAAKR,EAAQE,GAAIF,QAASA,SCJhCS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqDCG,E,kDAvDb,aAAe,IAAD,8BACZ,gBA4BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA5BtC,EAAKC,MAAQ,CACXd,SAAU,GACVe,OAAQ,IAEV,EAAKC,WAAa,GANN,E,gEASO,IAAD,OACZC,EAAgB,CAAC,SAAU,SAAU,UAAW,UAAUhB,KAAI,SAACiB,GACnE,MAAO,CACLrB,KAAMqB,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,OAAO,EAAGH,EAAOI,QAC/DxB,MAAM,GAAD,OAAKoB,EAAL,0BACLvB,MAAM,GAAD,OAAK4B,oBAAL,uBAA0CL,EAA1C,mBAITM,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKlB,SAAS,CACZV,SAAUiB,EAAcY,OAAOD,U,+BAS7B,IAAD,EAC2BE,KAAKhB,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACdoB,EAAmB/B,EAOvB,OANI8B,KAAKd,aAAeL,GAAeA,IACrCoB,EAAmB/B,EAASgC,QAAO,SAACtC,GAClC,OAAOA,EAAQG,KAAKoC,cAAcC,SAASvB,EAAYsB,mBAG3DH,KAAKd,WAAaL,EAEhB,yBAAKrB,UAAU,OACb,gDACA,kBAAC,EAAD,CACEc,YAAY,kBACZC,aAAcyB,KAAKzB,eAErB,kBAAC,EAAD,CAAUL,SAAU+B,S,GAlDVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84c5e98e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.scss\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      width=\"80\"\r\n      src={\r\n        props.monster.image ||\r\n        `https://robohash.org/${props.monster.id}?set=set2&size=180x180`\r\n      }\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.scss\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map((monster) => {\r\n      return <Card key={monster.id} monster={monster}></Card>;\r\n    })}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search-box.styles.scss\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  ></input>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      search: \"\",\r\n    };\r\n    this.lastSearch = \"\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    const staticPersons = [\"dariel\", \"marcos\", \"guelmis\", \"victor\"].map((person) => {\r\n      return {\r\n        name: person.charAt(0).toUpperCase() + person.substr(1, person.length),\r\n        email: `${person}-monster@codegenio.com`,\r\n        image: `${process.env.PUBLIC_URL}/assets/img/${person}-zombie.jpg`\r\n      };\r\n    });\r\n  \r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        this.setState({\r\n          monsters: staticPersons.concat(users),\r\n        });\r\n      });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    let filteredMonsters = monsters;\r\n    if (this.lastSearch !== searchField && searchField) {\r\n      filteredMonsters = monsters.filter((monster) => {\r\n        return monster.name.toLowerCase().includes(searchField.toLowerCase());\r\n      });\r\n    }\r\n    this.lastSearch = searchField;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters RoloDex</h1>\r\n        <SearchBox\r\n          placeholder=\"search monsters\"\r\n          handleChange={this.handleChange}\r\n        />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}